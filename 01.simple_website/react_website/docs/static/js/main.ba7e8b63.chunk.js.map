{"version":3,"sources":["components/Header/Navigation/index.tsx","components/Header/index.tsx","components/Jumbotron/index.tsx","pages/About/index.tsx","pages/Home/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","anchorEl","handleClick","event","setState","currentTarget","handleClose","inherits","createClass","key","value","react_default","a","createElement","index_es","position","className","variant","color","aria-owns","undefined","aria-haspopup","onClick","id","open","Boolean","onClose","Link","to","Component","Header","Header_Navigation_Navigation","Jumbotron","Button_default","About","Home","App","BrowserRouter","components_Jumbotron","Route","exact","path","component","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba7e8b63.chunk.js","sourcesContent":["import './Navigation.css';\r\n\r\nimport { AppBar, Button, Menu, MenuItem, Toolbar, Typography } from '@material-ui/core';\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class Navigation extends Component {\r\n\tpublic state = {\r\n\t\tanchorEl: null,\r\n\t};\r\n\r\n\thandleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n\t\tthis.setState({ anchorEl: event.currentTarget });\r\n\t};\r\n\r\n\thandleClose = () => {\r\n\t\tthis.setState({ anchorEl: null });\r\n\t};\r\n\r\n\r\n\trender() {\r\n\t\tconst { anchorEl } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<nav>\r\n\t\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t\t<Toolbar className=\"toolbar\">\r\n\t\t\t\t\t\t<Typography variant=\"h6\" color=\"inherit\">\r\n\t\t\t\t\t\t\tMy Application\r\n\t\t\t        \t</Typography>\r\n\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tclassName=\"open-menu\"\r\n\t\t\t\t\t\t\taria-owns={anchorEl ? 'simple-menu' : undefined}\r\n\t\t\t\t\t\t\taria-haspopup=\"true\"\r\n\t\t\t\t\t\t\tonClick={this.handleClick}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tOpen Menu\r\n\t\t\t\t        </Button>\r\n\t\t\t\t\t\t<Menu\r\n\t\t\t\t\t\t\tid=\"simple-menu\"\r\n\t\t\t\t\t\t\tanchorEl={anchorEl}\r\n\t\t\t\t\t\t\topen={Boolean(anchorEl)}\r\n\t\t\t\t\t\t\tonClose={this.handleClose}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<MenuItem onClick={this.handleClose}>\r\n\t\t\t\t\t\t\t\t<Link to=\"/\">Home</Link>\r\n\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t<MenuItem onClick={this.handleClose}>\r\n\t\t\t\t\t\t\t\t<Link to=\"/about\">About</Link>\r\n\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t</Menu>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</AppBar>\r\n\t\t\t</nav>\r\n\t\t);\r\n\t}\r\n}","import React from 'react';\r\n\r\nimport { Navigation } from './Navigation';\r\n\r\nexport default function Header () {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<Navigation />\r\n\t\t</header>\r\n\t);\r\n}","import './Jumbotron.css';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport React from 'react';\r\n\r\n\r\nconst jbtHeading: string = 'Hello world!';\r\nconst jbtText: string = 'Buttons allow users to take actions, and make choices, with a single tap.';\r\nconst jbtButton: string = 'Read More';\r\n\r\nconst Jumbotron = () => {\r\n\treturn (\r\n\t\t<div className=\"jumbotron\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<h1>{jbtHeading}</h1>\r\n\t\t\t\t<p>{jbtText}</p>\r\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" >\r\n\t\t\t\t\t{jbtButton}\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Jumbotron;","const About = () => {\r\n\treturn 'Hello About!';\r\n}\r\n\r\nexport default About;","const Home = () => {\r\n\treturn 'Hello home!';\r\n}\r\n\r\nexport default Home;","import './App.css';\n\nimport React, { Component, lazy } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Header from './components/Header';\nimport Jumbotron from './components/Jumbotron';\nimport About from './pages/About';\nimport Home from './pages/Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"app\">\n          <Header />\n          <Jumbotron />\n          <div className=\"container\">\n            <Route exact path=\"/\" component={Home as any} />\n            <Route path=\"/about/\" component={About as any} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}